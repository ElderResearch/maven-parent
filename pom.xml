<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.ElderResearch</groupId>
	<artifactId>maven-parent</artifactId>
	<version>6.0.3-SNAPSHOT</version>
	<packaging>pom</packaging>
	
	<name>Elder Research Parent</name>
	<description>Elder Research parent POM defining repositories, metadata, and dependencies that all internal and open-source projects inherit</description>
	<organization>
		<name>Elder Research</name>
		<url>http://www.elderresearch.com</url>
	</organization>
	<inceptionYear>1995</inceptionYear>
	
	<issueManagement>
		<system>Jira</system>
		<url>https://elderresearch.atlassian.net/jira</url>
	</issueManagement>
	<ciManagement>
		<system>Gitlab CI/CD</system>
		<url>https://gitlab.com/ElderResearch</url>
	</ciManagement>
	<distributionManagement>
		<repository>
			<id>eri-releases</id>
			<url>${eri.artifacts.releases}</url>
		</repository>
		<snapshotRepository>
			<id>eri-snapshots</id>
			<url>${eri.artifacts.snapshots}</url>
		</snapshotRepository>
	</distributionManagement>
	
	<licenses>
		<license>
			<name>MIT</name>
			<url>http://opensource.org/licenses/MIT</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.generatedSource.directory>${project.build.directory}/generated-sources</project.generatedSource.directory>
		
		<!-- These properties help with cross-compiling to a different Java version for backwards compatibility. If you
		     bind the copy phase to "generate-sources" and specify the sibling module with the current sources, the
		     plugin will copy over the sources to a folder in target to allow recompilation with a different release. -->
		<source.copy.phase>none</source.copy.phase>
		<source.copy.exclude></source.copy.exclude>
		<relative.source.path>../core/src/main/java</relative.source.path>
		<maven.compiler.release>11</maven.compiler.release>
	
		<!-- Git URLs -->
		<!-- Also set the project directory to get SCM URLs working. See https://stackoverflow.com/a/48492290/5162458 -->
		<git.url.base>github.com/ElderResearch</git.url.base>
		<project.directory>maven-parent</project.directory>
		
		<!-- Artifact distribution -->
		<eri.artifacts.base>https://elderresearch.jfrog.io/elderresearch</eri.artifacts.base>
		<eri.artifacts.releases>${eri.artifacts.base}/libs-release</eri.artifacts.releases>
		<eri.artifacts.snapshots>${eri.artifacts.base}/libs-snapshot</eri.artifacts.snapshots>

		<!-- Declare logging version as a property for children to use -->
		<log4j.version>2.13.3</log4j.version>

		<!-- For generating swagger.json by scraping source models and javadoc -->
		<enunciate.version>2.13.0</enunciate.version>
		<enunciate.disabled>true</enunciate.disabled>
		
		<!-- For boilerplate reduction and delomboking for javadoc -->
		<lombok.version>1.18.12</lombok.version>
		<lombok.delombok.dir>${project.build.directory}/delombok-for-javadoc</lombok.delombok.dir>
		<lombok.src.dir>${project.basedir}/src/main/lombok</lombok.src.dir>
		
		<!-- These are referenced multiple places so are located here to avoid redundancy and allow for convenient
		     change since currently there isn't an "official" version of SWT in central -->
		<swt.groupId>org.eclipse.swt</swt.groupId>
		<swt.artifactId.win>org.eclipse.swt.win32.win32.x86_64</swt.artifactId.win>
		<swt.artifactId.mac>org.eclipse.swt.cocoa.macosx.x86_64</swt.artifactId.mac>
		<swt.artifactId.linux>org.eclipse.swt.gtk.linux.x86_64</swt.artifactId.linux>
		
		<!-- These properties are used to create platform-specific executables -->
		<application.maxHeapMB>1024</application.maxHeapMB>
		<application.minJavaVersion>11.0</application.minJavaVersion>
		<application.vmArgs>-da</application.vmArgs>
		<application.headerType>gui</application.headerType>
		<application.vendor>${project.organization.name}</application.vendor>
		<application.file>${project.name}</application.file>
	</properties>
	
	<modules>
		<module>internal-parent</module>
		<module>scala-parent</module>
	</modules>

	<url>https://${git.url.base}</url>

	<scm>
		<connection>scm:git:ssh://${git.url.base}</connection>
		<url>https://${git.url.base}</url>
	</scm>

	<!-- Standardize Jackson versions across all modules -->
	<dependencyManagement>
		<dependencies>
        	<dependency>
            	<groupId>com.fasterxml.jackson</groupId>
            	<artifactId>jackson-bom</artifactId>
            	<version>2.11.2</version>
            	<scope>import</scope>
	            <type>pom</type>
	        </dependency>
	    </dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Always bring in JUnit - test scope won't bloat binaries -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- Always bring in Lombok - provided scope won't bloat binaries (APT only) -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Provide Auto Service for picking up implementing classes and adding to manifest -->
		<dependency>
			<groupId>com.google.auto.service</groupId>
			<artifactId>auto-service</artifactId>
			<version>1.0-rc6</version>
            <scope>provided</scope>
          	<exclusions>
	    		<!-- See https://groups.google.com/forum/#!topic/guava-discuss/AKBGPca9unw -->
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>listenablefuture</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- Standardize logging (children can always exclude) -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<!-- For YAML syntax for config files (much more concise than XML), and Jackson is generally awesome -->
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
		    <groupId>com.fasterxml.jackson.dataformat</groupId>
		    <artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>
	</dependencies>
	
	<build>
		<defaultGoal>verify</defaultGoal>
		<plugins>
			<!-- Delombok sources for plugins (like Javadoc) that expect "vanilla" Java sources -->
			<plugin>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok-maven-plugin</artifactId>
				<version>${lombok.version}.0</version>
				<executions>
					<execution>
						<id>delombok-main-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>delombok</goal>
						</goals>
						<configuration>
							<sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
							<addOutputDirectory>false</addOutputDirectory>
							<outputDirectory>${lombok.delombok.dir}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>delombok-other-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>delombok</goal>
						</goals>
						<configuration>
							<sourceDirectory>${lombok.src.dir}</sourceDirectory>
							<addOutputDirectory>false</addOutputDirectory>
							<outputDirectory>${lombok.delombok.dir}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Generate Javadocs from delomboked source. Also disables doclint (which will fail the build)
			     with the javadoc.opts property that gets set by profile activation below. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<additionalOptions>
								<additionalOption>${javadoc.opts}</additionalOption>
							</additionalOptions>
							<sourcepath>${lombok.delombok.dir}</sourcepath>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Declare compiler plugin to pin version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
			</plugin>
			<!-- Don't fork process when installing a jar and pin version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>install</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Sets useful properties (like timestamp and version) to be made available to the build.
			     Additionally, attaches 3 common generated source folders (java, jooq, and xjc) as source folders. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>parse-version</id>
						<goals>
							<goal>parse-version</goal>
						</goals>
					</execution>
					<execution>
						<id>timestamp-property</id>
						<goals>
							<goal>timestamp-property</goal>
						</goals>
						<configuration>
							<name>year.current</name>
							<pattern>yyyy</pattern>
							<unit>year</unit>
						</configuration>
					</execution>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<!-- Doesn't hurt to declare all folders here - they'll get picked up if they exist -->
							<sources>
								<!-- Generic folder for generated Java sources -->
								<source>${project.generatedSource.directory}/java</source>
								<!-- Folder for generated JOOQ database models -->
								<source>${project.generatedSource.directory}/jooq</source>
								<!-- Folder for generated JAXB/XSD models -->
								<source>${project.generatedSource.directory}/xjc</source>
							</sources>
						</configuration>
					</execution>
				</executions>
				<configuration>
				    <locale>en_US</locale>
				</configuration>
			</plugin>
			<!-- Enunciate generates documentation (like swagger.json) From Javadocs -->
			<plugin>
				<groupId>com.webcohesion.enunciate</groupId>
				<artifactId>enunciate-maven-plugin</artifactId>
				<version>${enunciate.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>docs</goal>
						</goals>
						<configuration>
							<docsDir>${project.build.outputDirectory}</docsDir>
							<skipEnunciate>${enunciate.disabled}</skipEnunciate>
							<sources>
								<source>${lombok.delombok.dir}</source>
							</sources>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.webcohesion.enunciate</groupId>
						<artifactId>enunciate-lombok</artifactId>
						<version>${enunciate.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Maven site plugin configured to use Velocity and Markdown templates -->
			<plugin>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.9.0</version>
				<executions>
					<execution>
						<id>attach-descriptor</id>
						<goals>
							<goal>attach-descriptor</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<generateReports>false</generateReports>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>lt.velykis.maven.skins</groupId>
						<artifactId>reflow-velocity-tools</artifactId>
						<version>1.1.1</version>
					</dependency>
					<dependency>
						<groupId>org.apache.velocity</groupId>
						<artifactId>velocity</artifactId>
						<version>1.7</version>
					</dependency>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-markdown</artifactId>
						<version>1.6</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Copy sources to a generated source folder so it can be recompiled for a different Java version -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>copy-java-source</id>
						<phase>${source.copy.phase}</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.generatedSource.directory}/java</outputDirectory>
							<resources>
								<resource>
									<directory>${relative.source.path}</directory>
									<filtering>false</filtering>
									<exclude>${source.copy.exclude}</exclude>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>			
		</plugins>
		
		<!-- These plugins are used to create platform specific executables and must be instantiated by children -->
		<pluginManagement>
			<plugins>
				<!-- Create a "fat"/shaded jar that is executable and contains all dependencies -->			
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.3</version>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>shade</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<shadedArtifactAttached>true</shadedArtifactAttached>
						<shadedClassifierName>shaded</shadedClassifierName>
						<filters>
							<filter>
								<artifact>*:*</artifact>
								<excludes>
									<exclude>META-INF/*.SF</exclude>
									<exclude>META-INF/*.DSA</exclude>
									<exclude>META-INF/*.RSA</exclude>
								</excludes>
							</filter>
						</filters>
						<transformers>
							<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
							<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
								<mainClass>${application.mainClass}</mainClass>
								<manifestEntries>
									<Implementation-Title>${project.name}</Implementation-Title>
									<Implementation-Version>${project.version}</Implementation-Version>
									<Implementation-Vendor>${application.vendor}</Implementation-Vendor>
									<!-- Log4j2 is multi-release even if we aren't -->
									<Multi-Release>true</Multi-Release>
								</manifestEntries>
							</transformer>
						</transformers>
					</configuration>
				</plugin>
				<!-- Wrap the shaded jar as an .exe for Windows -->
				<plugin>
					<groupId>com.akathist.maven.plugins.launch4j</groupId>
					<artifactId>launch4j-maven-plugin</artifactId>
					<version>1.7.25</version>
					<executions>
						<execution>
							<id>l4j-gui</id>
							<phase>package</phase>
							<goals>
								<goal>launch4j</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<headerType>${application.headerType}</headerType>
						<outfile>${project.build.directory}/${application.file}.exe</outfile>
						<jar>${project.build.directory}/${project.artifactId}-${project.version}-shaded.jar</jar>
						<errTitle>${project.name} Error</errTitle>
						<classPath>
							<mainClass>${application.mainClass}</mainClass>
						</classPath>
						<icon>${application.iconWin}</icon>
						<jre>
							<minVersion>${application.minJavaVersion}.0</minVersion>
							<initialHeapSize>128</initialHeapSize>
							<maxHeapSize>${application.maxHeapMB}</maxHeapSize>
							<opts>
								<opt>${application.vmArgs}</opt>
							</opts>
						</jre>
						<versionInfo>
							<fileVersion>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.0</fileVersion>
							<txtFileVersion>${project.version}</txtFileVersion>
							<fileDescription>${project.description}</fileDescription>
							<copyright>${year.current} ${project.organization.name}</copyright>
							<productVersion>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.0</productVersion>
							<txtProductVersion>${project.version}</txtProductVersion>
							<productName>${project.name}</productName>
							<internalName>${project.name}</internalName>
							<originalFilename>${project.artifactId}.exe</originalFilename>
						</versionInfo>
					</configuration>
				</plugin>
				<!-- Wrap the shaded jar as a .app for Mac OSX -->
				<plugin>
					<groupId>io.github.fvarrui</groupId>
					<artifactId>javapackager</artifactId>
					<version>1.1.0</version>
					<configuration>
						<platform>mac</platform>
						<bundleJre>false</bundleJre>
						<name>${application.file}</name>
						<displayName>${project.name}</displayName>
						<mainClass>${application.mainClass}</mainClass>
						<administratorRequired>false</administratorRequired>
						<generateInstaller>false</generateInstaller>
						<runnableJar>${project.build.directory}/${project.artifactId}-${project.version}-shaded.jar</runnableJar>
						<copyDependencies>false</copyDependencies>
						<vmArgs>
							<vmArg>-Xmx${application.maxHeapMB}M</vmArg>
							<vmArg>${application.vmArgs}</vmArg>
						</vmArgs>
						<iconFile>${application.iconMac}</iconFile>
					</configuration>
					<executions>
	                    <execution>
	                        <phase>package</phase>
	                        <goals>
	                            <goal>package</goal>
	                        </goals>
	                    </execution>
	                </executions>
				</plugin>
				<!-- Wrap the shaded jar as a .sh for Linux -->
				<plugin>
				    <groupId>org.skife.maven</groupId>
    				<artifactId>really-executable-jar-maven-plugin</artifactId>
					<version>1.5.0</version>
					<configuration>
						<flags>-Xmx${application.maxHeapMB}M ${application.vmArgs}</flags>
						<programFile>${application.file}</programFile>
					</configuration>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>really-executable-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- Some projects contain platform-specific dependencies. They should build separate artifacts for each platform via the module mechanism. However, for 
		development, it is useful to be able to automatically select the correct one based on the developer's operating system. Use these profiles to define the 
		correct value for platform-specific code. It is recommended all properties start with "system" -->
	<profiles>
		<profile>
			<id>host-is-mac</id>
			<activation>
				<os><family>mac</family></os>
			</activation>
			<properties>
				<system.platform>mac</system.platform>
				<system.swt.artifactId>${swt.artifactId.mac}</system.swt.artifactId>
			</properties>
		</profile>
		<profile>
			<id>host-is-win</id>
			<activation>
				<os><family>windows</family></os>
			</activation>
			<properties>
				<system.platform>win</system.platform>
				<system.swt.artifactId>${swt.artifactId.win}</system.swt.artifactId>
			</properties>
		</profile>
		<profile>
			<id>host-is-nix</id>
			<activation>
				<os><family>linux</family></os>
			</activation>
			<properties>
				<system.platform>linux</system.platform>
				<system.swt.artifactId>${swt.artifactId.linux}</system.swt.artifactId>
			</properties>
		</profile>
		
		<!-- Javadocs now return exit code 1 in JDK8+ which prevents any Maven build from completing unless the Javadocs
		     are perfect. In Java 11, this option appears to be ignored. -->
		<profile>
			<id>javadoc-doclint-disable</id>
			<activation>
				<jdk>[1.8,)</jdk>
			</activation>
			<properties>
				<javadoc.opts>-Xdoclint:none</javadoc.opts>
			</properties>
		</profile>
	</profiles>
</project>
